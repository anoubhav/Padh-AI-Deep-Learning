{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.preprocessing import LabelEncoder,MinMaxScaler, StandardScaler\n",
    "from sklearn.model_selection import train_test_split, ParameterGrid\n",
    "from sklearn.metrics import accuracy_score, confusion_matrix, mean_squared_error, log_loss\n",
    "import operator\n",
    "import json\n",
    "from IPython import display\n",
    "import os\n",
    "import warnings\n",
    "import itertools\n",
    "np.random.seed(0)\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "THRESHOLD = 4"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Task: To predict whether the user likes the mobile phone or not. <br>\n",
    "Assumption: If the average rating of mobile >= threshold, then the user likes it, otherwise not."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>Missing values:</b><br>\n",
    "'Also Known As'(459),'Applications'(421),'Audio Features'(437),'Bezel-less display'(266),'Browser'(449),'Build Material'(338),'Co-Processor'(451),'Display Colour'(457),'Mobile High-Definition Link(MHL)'(472),'Music'(447)\n",
    "'Email','Fingerprint Sensor Position'(174),'Games'(446),'HDMI'(454),'Heart Rate Monitor'(467),'IRIS Scanner'(467),\n",
    "'Optical Image Stabilisation'(219),'Other Facilities'(444),'Phone Book'(444),'Physical Aperture'(87),'Quick Charging'(122),'Ring Tone'(444),'Ruggedness'(430),SAR Value(315),'SIM 3'(472),'SMS'(470)', 'Screen Protection'(229),'Screen to Body Ratio (claimed by the brand)'(428),'Sensor'(242),'Software Based Aperture'(473),\n",
    "'Special Features'(459),'Standby time'(334),'Stylus'(473),'TalkTime'(259), 'USB Type-C'(374),'Video Player'(456),\n",
    "'Video Recording Features'(458),'Waterproof'(398),'Wireless Charging','USB OTG Support'(159), 'Video ,'Recording'(113),'Java'(471),'Browser'(448)\n",
    "\n",
    "<b>Very low variance:</b><br>\n",
    "'Architecture'(most entries are 64-bit),'Audio Jack','GPS','Loudspeaker','Network','Network Support','Other Sensors'(28),'SIM Size', 'VoLTE'\n",
    "\n",
    "\n",
    "<b>Multivalued:</b><br>\n",
    "'Colours','Custom UI','Model'(1),'Other Sensors','Launch Date'\n",
    "\n",
    "<b>Not important:</b><br>\n",
    "'Bluetooth', 'Settings'(75),'Wi-Fi','Wi-Fi Features'\n",
    "\n",
    "<b>Doubtful:</b><br>\n",
    "'Aspect Ratio','Autofocus','Brand','Camera Features','Fingerprint Sensor'(very few entries are missing),\n",
    "'Fingerprint Sensor Position', 'Graphics'(multivalued),'Image resolution'(multivalued),'SIM Size','Sim Slot(s)', 'User Available Storage', 'SIM 1', 'SIM 2','Shooting Modes', 'Touch Screen'(24), 'USB Connectivity'\n",
    "    \n",
    "<b>To check:</b><br>\n",
    "'Display Type','Expandable Memory','FM Radio'\n",
    "\n",
    "<b>High Correlation with other features</b><br>\n",
    "'SIM Slot(s)' high correlation with SIM1\n",
    "'Weight' has high high correlation with capacity , screen-to-body ratio\n",
    "'Height' - screen size is also there\n",
    "    \n",
    "<b>Given a mobile, we can't directly get these features</b><br>\n",
    "'Rating Count', 'Review Count'\n",
    "\n",
    "<b>Keeping:</b><br>\n",
    "'Capacity','Flash'(17),'Height'(22),'Internal Memory'(20, require cleaning),'Operating System'(25, require cleaning), 'Pixel Density'(1, clean it),'Processor'(22, clean it), 'RAM'(17, clean), 'Rating','Resolution'(cleaning), 'Screen Resolution','Screen Size', 'Thickness'(22), 'Type','User Replaceable','Weight'(cleaning),'Sim Size'(), 'Other Sensors'(28), 'Screen to Body Ratio (calculated)','Width',\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of data points in train: 355\n",
      "Number of features in train: 99\n",
      "Number of data points in test: 119\n",
      "Number of features in test: 98\n"
     ]
    }
   ],
   "source": [
    "# read data from file\n",
    "# train = pd.read_csv(\"../input/train.csv\") \n",
    "# test = pd.read_csv(\"../input/test.csv\")\n",
    "train = pd.read_csv(\"train.csv\") \n",
    "test = pd.read_csv(\"test.csv\")\n",
    "\n",
    "\n",
    "# check the number of features and data points in train\n",
    "print(\"Number of data points in train: %d\" % train.shape[0])\n",
    "print(\"Number of features in train: %d\" % train.shape[1])\n",
    "\n",
    "# check the number of features and data points in test\n",
    "print(\"Number of data points in test: %d\" % test.shape[0])\n",
    "print(\"Number of features in test: %d\" % test.shape[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "def data_clean(data):\n",
    "    \n",
    "    # Let's first remove all missing value features\n",
    "    columns_to_remove = ['Also Known As','Applications','Audio Features','Bezel-less display'\n",
    "                         'Browser','Build Material','Co-Processor','Browser'\n",
    "                         'Display Colour','Mobile High-Definition Link(MHL)',\n",
    "                         'Music', 'Email','Fingerprint Sensor Position',\n",
    "                         'Games','HDMI','Heart Rate Monitor','IRIS Scanner', \n",
    "                         'Optical Image Stabilisation','Other Facilities',\n",
    "                         'Phone Book','Physical Aperture','Quick Charging',\n",
    "                         'Ring Tone','Ruggedness','SAR Value','SIM 3','SMS',\n",
    "                         'Screen Protection','Screen to Body Ratio (claimed by the brand)',\n",
    "                         'Sensor','Software Based Aperture', 'Special Features',\n",
    "                         'Standby time','Stylus','TalkTime', 'USB Type-C',\n",
    "                         'Video Player', 'Video Recording Features','Waterproof',\n",
    "                         'Wireless Charging','USB OTG Support', 'Video Recording','Java']\n",
    "\n",
    "    columns_to_retain = list(set(data.columns)-set(columns_to_remove))\n",
    "    data = data[columns_to_retain]\n",
    "\n",
    "    #Features having very low variance \n",
    "    columns_to_remove = ['Architecture','Audio Jack','GPS','Loudspeaker','Network','Network Support','VoLTE']\n",
    "    columns_to_retain = list(set(data.columns)-set(columns_to_remove))\n",
    "    data = data[columns_to_retain]\n",
    "\n",
    "    # Multivalued:\n",
    "    columns_to_remove = ['Architecture','Launch Date','Audio Jack','GPS','Loudspeaker','Network','Network Support','VoLTE', 'Custom UI']\n",
    "    columns_to_retain = list(set(data.columns)-set(columns_to_remove))\n",
    "    data = data[columns_to_retain]\n",
    "\n",
    "    # Not much important\n",
    "    columns_to_remove = ['Bluetooth', 'Settings','Wi-Fi','Wi-Fi Features']\n",
    "    columns_to_retain = list(set(data.columns)-set(columns_to_remove))\n",
    "    data = data[columns_to_retain]\n",
    "    \n",
    "    return data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Removing features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "train = data_clean(train)\n",
    "test = data_clean(test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "removing all those data points in which more than 15 features are missing "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "train = train[(train.isnull().sum(axis=1) <= 15)]\n",
    "# You shouldn't remove data points from test set\n",
    "#test = test[(test.isnull().sum(axis=1) <= 15)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of data points in train: 341\n",
      "Number of features in train: 47\n",
      "Number of data points in test: 119\n",
      "Number of features in test: 46\n"
     ]
    }
   ],
   "source": [
    "# check the number of features and data points in train\n",
    "print(\"Number of data points in train: %d\" % train.shape[0])\n",
    "print(\"Number of features in train: %d\" % train.shape[1])\n",
    "\n",
    "# check the number of features and data points in test\n",
    "print(\"Number of data points in test: %d\" % test.shape[0])\n",
    "print(\"Number of features in test: %d\" % test.shape[1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Filling Missing values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "def for_integer(test):\n",
    "    try:\n",
    "        test = test.strip()\n",
    "        return int(test.split(' ')[0])\n",
    "    except IOError:\n",
    "           pass\n",
    "    except ValueError:\n",
    "        pass\n",
    "    except:\n",
    "        pass\n",
    "\n",
    "def for_string(test):\n",
    "    try:\n",
    "        test = test.strip()\n",
    "        return (test.split(' ')[0])\n",
    "    except IOError:\n",
    "        pass\n",
    "    except ValueError:\n",
    "        pass\n",
    "    except:\n",
    "        pass\n",
    "\n",
    "def for_float(test):\n",
    "    try:\n",
    "        test = test.strip()\n",
    "        return float(test.split(' ')[0])\n",
    "    except IOError:\n",
    "        pass\n",
    "    except ValueError:\n",
    "        pass\n",
    "    except:\n",
    "        pass\n",
    "def find_freq(test):\n",
    "    try:\n",
    "        test = test.strip()\n",
    "        test = test.split(' ')\n",
    "        if test[2][0] == '(':\n",
    "            return float(test[2][1:])\n",
    "        return float(test[2])\n",
    "    except IOError:\n",
    "        pass\n",
    "    except ValueError:\n",
    "        pass\n",
    "    except:\n",
    "        pass\n",
    "\n",
    "    \n",
    "def for_Internal_Memory(test):\n",
    "    try:\n",
    "        test = test.strip()\n",
    "        test = test.split(' ')\n",
    "        if test[1] == 'GB':\n",
    "            return int(test[0])\n",
    "        if test[1] == 'MB':\n",
    "#             print(\"here\")\n",
    "            return (int(test[0]) * 0.001)\n",
    "    except IOError:\n",
    "           pass\n",
    "    except ValueError:\n",
    "        pass\n",
    "    except:\n",
    "        pass\n",
    "    \n",
    "def find_freq(test):\n",
    "    try:\n",
    "        test = test.strip()\n",
    "        test = test.split(' ')\n",
    "        if test[2][0] == '(':\n",
    "            return float(test[2][1:])\n",
    "        return float(test[2])\n",
    "    except IOError:\n",
    "        pass\n",
    "    except ValueError:\n",
    "        pass\n",
    "    except:\n",
    "        pass\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "def data_clean_2(x):\n",
    "    data = x.copy()\n",
    "    \n",
    "    data['Capacity'] = data['Capacity'].apply(for_integer)\n",
    "\n",
    "    data['Height'] = data['Height'].apply(for_float)\n",
    "    data['Height'] = data['Height'].fillna(data['Height'].mean())\n",
    "\n",
    "    data['Internal Memory'] = data['Internal Memory'].apply(for_Internal_Memory)\n",
    "\n",
    "    data['Pixel Density'] = data['Pixel Density'].apply(for_integer)\n",
    "\n",
    "    data['Internal Memory'] = data['Internal Memory'].fillna(data['Internal Memory'].median())\n",
    "    data['Internal Memory'] = data['Internal Memory'].astype(int)\n",
    "\n",
    "    data['RAM'] = data['RAM'].apply(for_integer)\n",
    "    data['RAM'] = data['RAM'].fillna(data['RAM'].median())\n",
    "    data['RAM'] = data['RAM'].astype(int)\n",
    "\n",
    "    data['Resolution'] = data['Resolution'].apply(for_integer)\n",
    "    data['Resolution'] = data['Resolution'].fillna(data['Resolution'].median())\n",
    "    data['Resolution'] = data['Resolution'].astype(int)\n",
    "\n",
    "    data['Screen Size'] = data['Screen Size'].apply(for_float)\n",
    "\n",
    "    data['Thickness'] = data['Thickness'].apply(for_float)\n",
    "    data['Thickness'] = data['Thickness'].fillna(data['Thickness'].mean())\n",
    "    data['Thickness'] = data['Thickness'].round(2)\n",
    "\n",
    "    data['Type'] = data['Type'].fillna('Li-Polymer')\n",
    "\n",
    "    data['Screen to Body Ratio (calculated)'] = data['Screen to Body Ratio (calculated)'].apply(for_float)\n",
    "    data['Screen to Body Ratio (calculated)'] = data['Screen to Body Ratio (calculated)'].fillna(data['Screen to Body Ratio (calculated)'].mean())\n",
    "    data['Screen to Body Ratio (calculated)'] = data['Screen to Body Ratio (calculated)'].round(2)\n",
    "\n",
    "    data['Width'] = data['Width'].apply(for_float)\n",
    "    data['Width'] = data['Width'].fillna(data['Width'].mean())\n",
    "    data['Width'] = data['Width'].round(2)\n",
    "\n",
    "    data['Flash'][data['Flash'].isna() == True] = \"Other\"\n",
    "\n",
    "    data['User Replaceable'][data['User Replaceable'].isna() == True] = \"Other\"\n",
    "\n",
    "    data['Num_cores'] = data['Processor'].apply(for_string)\n",
    "    data['Num_cores'][data['Num_cores'].isna() == True] = \"Other\"\n",
    "\n",
    "\n",
    "    data['Processor_frequency'] = data['Processor'].apply(find_freq)\n",
    "    #because there is one entry with 208MHz values, to convert it to GHz\n",
    "    data['Processor_frequency'][data['Processor_frequency'] > 200] = 0.208\n",
    "    data['Processor_frequency'] = data['Processor_frequency'].fillna(data['Processor_frequency'].mean())\n",
    "    data['Processor_frequency'] = data['Processor_frequency'].round(2)\n",
    "\n",
    "    data['Camera Features'][data['Camera Features'].isna() == True] = \"Other\"\n",
    "\n",
    "    #simplifyig Operating System to os_name for simplicity\n",
    "    data['os_name'] = data['Operating System'].apply(for_string)\n",
    "    data['os_name'][data['os_name'].isna() == True] = \"Other\"\n",
    "\n",
    "    data['Sim1'] = data['SIM 1'].apply(for_string)\n",
    "\n",
    "    data['SIM Size'][data['SIM Size'].isna() == True] = \"Other\"\n",
    "\n",
    "    data['Image Resolution'][data['Image Resolution'].isna() == True] = \"Other\"\n",
    "\n",
    "    data['Fingerprint Sensor'][data['Fingerprint Sensor'].isna() == True] = \"Other\"\n",
    "\n",
    "    data['Expandable Memory'][data['Expandable Memory'].isna() == True] = \"No\"\n",
    "\n",
    "    data['Weight'] = data['Weight'].apply(for_integer)\n",
    "    data['Weight'] = data['Weight'].fillna(data['Weight'].mean())\n",
    "    data['Weight'] = data['Weight'].astype(int)\n",
    "\n",
    "    data['SIM 2'] = data['SIM 2'].apply(for_string)\n",
    "    data['SIM 2'][data['SIM 2'].isna() == True] = \"Other\"\n",
    "    \n",
    "    return data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of data points in train: 341\n",
      "Number of features in train: 51\n",
      "Number of data points in test: 119\n",
      "Number of features in test: 50\n"
     ]
    }
   ],
   "source": [
    "train = data_clean_2(train)\n",
    "test = data_clean_2(test)\n",
    "\n",
    "# check the number of features and data points in train\n",
    "print(\"Number of data points in train: %d\" % train.shape[0])\n",
    "print(\"Number of features in train: %d\" % train.shape[1])\n",
    "\n",
    "# check the number of features and data points in test\n",
    "print(\"Number of data points in test: %d\" % test.shape[0])\n",
    "print(\"Number of features in test: %d\" % test.shape[1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Not very important feature"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "def data_clean_3(x):\n",
    "    \n",
    "    data = x.copy()\n",
    "\n",
    "    columns_to_remove = ['User Available Storage','SIM Size','Chipset','Processor','Autofocus','Aspect Ratio','Touch Screen',\n",
    "                        'Bezel-less display','Operating System','SIM 1','USB Connectivity','Other Sensors','Graphics','FM Radio',\n",
    "                        'NFC','Shooting Modes','Browser','Display Colour' ]\n",
    "\n",
    "    columns_to_retain = list(set(data.columns)-set(columns_to_remove))\n",
    "    data = data[columns_to_retain]\n",
    "\n",
    "\n",
    "    columns_to_remove = [ 'Screen Resolution','User Replaceable','Camera Features',\n",
    "                        'Thickness', 'Display Type']\n",
    "\n",
    "    columns_to_retain = list(set(data.columns)-set(columns_to_remove))\n",
    "    data = data[columns_to_retain]\n",
    "\n",
    "\n",
    "    columns_to_remove = ['Fingerprint Sensor', 'Flash', 'Rating Count', 'Review Count','Image Resolution','Type','Expandable Memory',\\\n",
    "                        'Colours','Width','Model']\n",
    "    columns_to_retain = list(set(data.columns)-set(columns_to_remove))\n",
    "    data = data[columns_to_retain]\n",
    "\n",
    "    return data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of data points in train: 341\n",
      "Number of features in train: 18\n",
      "Number of data points in test: 119\n",
      "Number of features in test: 17\n"
     ]
    }
   ],
   "source": [
    "train = data_clean_3(train)\n",
    "test = data_clean_3(test)\n",
    "\n",
    "# check the number of features and data points in train\n",
    "print(\"Number of data points in train: %d\" % train.shape[0])\n",
    "print(\"Number of features in train: %d\" % train.shape[1])\n",
    "\n",
    "# check the number of features and data points in test\n",
    "print(\"Number of data points in test: %d\" % test.shape[0])\n",
    "print(\"Number of features in test: %d\" % test.shape[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(460, 17)\n",
      "Index(['PhoneId', 'Screen Size', 'Sim1', 'RAM', 'Brand', 'Capacity',\n",
      "       'SIM Slot(s)', 'Screen to Body Ratio (calculated)', 'os_name', 'Weight',\n",
      "       'Height', 'Internal Memory', 'Resolution', 'Pixel Density', 'Num_cores',\n",
      "       'SIM 2', 'Processor_frequency'],\n",
      "      dtype='object')\n",
      "(460, 87)\n",
      "Index(['PhoneId', 'Screen Size', 'RAM', 'Capacity',\n",
      "       'Screen to Body Ratio (calculated)', 'Weight', 'Height',\n",
      "       'Internal Memory', 'Resolution', 'Pixel Density', 'Processor_frequency',\n",
      "       'Sim1_2G', 'Sim1_3G', 'Sim1_4G', 'Brand_10.or', 'Brand_Apple',\n",
      "       'Brand_Asus', 'Brand_Billion', 'Brand_Blackberry', 'Brand_Comio',\n",
      "       'Brand_Coolpad', 'Brand_Do', 'Brand_Gionee', 'Brand_Google',\n",
      "       'Brand_HTC', 'Brand_Honor', 'Brand_Huawei', 'Brand_InFocus',\n",
      "       'Brand_Infinix', 'Brand_Intex', 'Brand_Itel', 'Brand_Jivi',\n",
      "       'Brand_Karbonn', 'Brand_LG', 'Brand_Lava', 'Brand_LeEco',\n",
      "       'Brand_Lenovo', 'Brand_Lephone', 'Brand_Lyf', 'Brand_Meizu',\n",
      "       'Brand_Micromax', 'Brand_Mobiistar', 'Brand_Moto', 'Brand_Motorola',\n",
      "       'Brand_Nokia', 'Brand_Nubia', 'Brand_OPPO', 'Brand_OnePlus',\n",
      "       'Brand_Oppo', 'Brand_Panasonic', 'Brand_Razer', 'Brand_Realme',\n",
      "       'Brand_Reliance', 'Brand_Samsung', 'Brand_Sony', 'Brand_Spice',\n",
      "       'Brand_Tecno', 'Brand_Ulefone', 'Brand_VOTO', 'Brand_Vivo',\n",
      "       'Brand_Xiaomi', 'Brand_Xiaomi Poco', 'Brand_Yu', 'Brand_iVooMi',\n",
      "       'SIM Slot(s)_Dual SIM, GSM+CDMA', 'SIM Slot(s)_Dual SIM, GSM+GSM',\n",
      "       'SIM Slot(s)_Dual SIM, GSM+GSM, Dual VoLTE',\n",
      "       'SIM Slot(s)_Single SIM, GSM', 'os_name_Android', 'os_name_Blackberry',\n",
      "       'os_name_KAI', 'os_name_Nokia', 'os_name_Other', 'os_name_Tizen',\n",
      "       'os_name_iOS', 'Num_cores_312', 'Num_cores_Deca', 'Num_cores_Dual',\n",
      "       'Num_cores_Hexa', 'Num_cores_Octa', 'Num_cores_Other', 'Num_cores_Quad',\n",
      "       'Num_cores_Tru-Octa', 'SIM 2_2G', 'SIM 2_3G', 'SIM 2_4G',\n",
      "       'SIM 2_Other'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "# one hot encoding\n",
    "\n",
    "train_ids = train['PhoneId']\n",
    "test_ids = test['PhoneId']\n",
    "\n",
    "cols = list(test.columns)\n",
    "cols.remove('PhoneId')\n",
    "cols.insert(0, 'PhoneId')\n",
    "\n",
    "combined = pd.concat([train.drop('Rating', axis=1)[cols], test[cols]])\n",
    "print(combined.shape)\n",
    "print(combined.columns)\n",
    "\n",
    "combined = pd.get_dummies(combined)\n",
    "print(combined.shape)\n",
    "print(combined.columns)\n",
    "\n",
    "train_new = combined[combined['PhoneId'].isin(train_ids)]\n",
    "test_new = combined[combined['PhoneId'].isin(test_ids)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_new = train_new.merge(train[['PhoneId', 'Rating']], on='PhoneId')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of data points in train: 341\n",
      "Number of features in train: 88\n",
      "Number of data points in test: 119\n",
      "Number of features in test: 87\n"
     ]
    }
   ],
   "source": [
    "# check the number of features and data points in train\n",
    "print(\"Number of data points in train: %d\" % train_new.shape[0])\n",
    "print(\"Number of features in train: %d\" % train_new.shape[1])\n",
    "\n",
    "# check the number of features and data points in test\n",
    "print(\"Number of data points in test: %d\" % test_new.shape[0])\n",
    "print(\"Number of features in test: %d\" % test_new.shape[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PhoneId</th>\n",
       "      <th>Screen Size</th>\n",
       "      <th>RAM</th>\n",
       "      <th>Capacity</th>\n",
       "      <th>Screen to Body Ratio (calculated)</th>\n",
       "      <th>Weight</th>\n",
       "      <th>Height</th>\n",
       "      <th>Internal Memory</th>\n",
       "      <th>Resolution</th>\n",
       "      <th>Pixel Density</th>\n",
       "      <th>...</th>\n",
       "      <th>Num_cores_Hexa</th>\n",
       "      <th>Num_cores_Octa</th>\n",
       "      <th>Num_cores_Other</th>\n",
       "      <th>Num_cores_Quad</th>\n",
       "      <th>Num_cores_Tru-Octa</th>\n",
       "      <th>SIM 2_2G</th>\n",
       "      <th>SIM 2_3G</th>\n",
       "      <th>SIM 2_4G</th>\n",
       "      <th>SIM 2_Other</th>\n",
       "      <th>Rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>6.26</td>\n",
       "      <td>4</td>\n",
       "      <td>4000</td>\n",
       "      <td>80.68</td>\n",
       "      <td>182</td>\n",
       "      <td>157.9</td>\n",
       "      <td>64</td>\n",
       "      <td>20</td>\n",
       "      <td>403</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>6.20</td>\n",
       "      <td>3</td>\n",
       "      <td>4230</td>\n",
       "      <td>80.85</td>\n",
       "      <td>168</td>\n",
       "      <td>156.2</td>\n",
       "      <td>32</td>\n",
       "      <td>8</td>\n",
       "      <td>271</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>6.30</td>\n",
       "      <td>3</td>\n",
       "      <td>3500</td>\n",
       "      <td>83.68</td>\n",
       "      <td>168</td>\n",
       "      <td>157.0</td>\n",
       "      <td>32</td>\n",
       "      <td>25</td>\n",
       "      <td>409</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>6.00</td>\n",
       "      <td>4</td>\n",
       "      <td>3300</td>\n",
       "      <td>74.78</td>\n",
       "      <td>169</td>\n",
       "      <td>159.8</td>\n",
       "      <td>64</td>\n",
       "      <td>24</td>\n",
       "      <td>411</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>6.50</td>\n",
       "      <td>4</td>\n",
       "      <td>3750</td>\n",
       "      <td>84.23</td>\n",
       "      <td>175</td>\n",
       "      <td>160.4</td>\n",
       "      <td>64</td>\n",
       "      <td>16</td>\n",
       "      <td>396</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4.4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 88 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   PhoneId  Screen Size  RAM  Capacity  Screen to Body Ratio (calculated)  \\\n",
       "0        0         6.26    4      4000                              80.68   \n",
       "1        1         6.20    3      4230                              80.85   \n",
       "2        2         6.30    3      3500                              83.68   \n",
       "3        4         6.00    4      3300                              74.78   \n",
       "4        5         6.50    4      3750                              84.23   \n",
       "\n",
       "   Weight  Height  Internal Memory  Resolution  Pixel Density   ...    \\\n",
       "0     182   157.9               64          20            403   ...     \n",
       "1     168   156.2               32           8            271   ...     \n",
       "2     168   157.0               32          25            409   ...     \n",
       "3     169   159.8               64          24            411   ...     \n",
       "4     175   160.4               64          16            396   ...     \n",
       "\n",
       "   Num_cores_Hexa  Num_cores_Octa  Num_cores_Other  Num_cores_Quad  \\\n",
       "0               0               1                0               0   \n",
       "1               0               1                0               0   \n",
       "2               0               1                0               0   \n",
       "3               0               1                0               0   \n",
       "4               0               1                0               0   \n",
       "\n",
       "   Num_cores_Tru-Octa  SIM 2_2G  SIM 2_3G  SIM 2_4G  SIM 2_Other  Rating  \n",
       "0                   0         0         0         1            0     4.5  \n",
       "1                   0         0         0         1            0     4.5  \n",
       "2                   0         0         0         1            0     4.4  \n",
       "3                   0         0         0         1            0     4.3  \n",
       "4                   0         0         0         1            0     4.4  \n",
       "\n",
       "[5 rows x 88 columns]"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_new.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PhoneId</th>\n",
       "      <th>Screen Size</th>\n",
       "      <th>RAM</th>\n",
       "      <th>Capacity</th>\n",
       "      <th>Screen to Body Ratio (calculated)</th>\n",
       "      <th>Weight</th>\n",
       "      <th>Height</th>\n",
       "      <th>Internal Memory</th>\n",
       "      <th>Resolution</th>\n",
       "      <th>Pixel Density</th>\n",
       "      <th>...</th>\n",
       "      <th>Num_cores_Dual</th>\n",
       "      <th>Num_cores_Hexa</th>\n",
       "      <th>Num_cores_Octa</th>\n",
       "      <th>Num_cores_Other</th>\n",
       "      <th>Num_cores_Quad</th>\n",
       "      <th>Num_cores_Tru-Octa</th>\n",
       "      <th>SIM 2_2G</th>\n",
       "      <th>SIM 2_3G</th>\n",
       "      <th>SIM 2_4G</th>\n",
       "      <th>SIM 2_Other</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "      <td>6.20</td>\n",
       "      <td>2</td>\n",
       "      <td>4230</td>\n",
       "      <td>80.85</td>\n",
       "      <td>168</td>\n",
       "      <td>156.2</td>\n",
       "      <td>16</td>\n",
       "      <td>5</td>\n",
       "      <td>271</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>11</td>\n",
       "      <td>6.20</td>\n",
       "      <td>4</td>\n",
       "      <td>5000</td>\n",
       "      <td>81.60</td>\n",
       "      <td>205</td>\n",
       "      <td>156.0</td>\n",
       "      <td>64</td>\n",
       "      <td>12</td>\n",
       "      <td>402</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>13</td>\n",
       "      <td>6.30</td>\n",
       "      <td>6</td>\n",
       "      <td>3500</td>\n",
       "      <td>83.84</td>\n",
       "      <td>169</td>\n",
       "      <td>156.7</td>\n",
       "      <td>64</td>\n",
       "      <td>25</td>\n",
       "      <td>409</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>16</td>\n",
       "      <td>6.30</td>\n",
       "      <td>4</td>\n",
       "      <td>3500</td>\n",
       "      <td>83.84</td>\n",
       "      <td>169</td>\n",
       "      <td>156.7</td>\n",
       "      <td>64</td>\n",
       "      <td>16</td>\n",
       "      <td>409</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>19</td>\n",
       "      <td>5.99</td>\n",
       "      <td>4</td>\n",
       "      <td>4000</td>\n",
       "      <td>77.43</td>\n",
       "      <td>181</td>\n",
       "      <td>158.6</td>\n",
       "      <td>64</td>\n",
       "      <td>20</td>\n",
       "      <td>403</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 87 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   PhoneId  Screen Size  RAM  Capacity  Screen to Body Ratio (calculated)  \\\n",
       "0        3         6.20    2      4230                              80.85   \n",
       "1       11         6.20    4      5000                              81.60   \n",
       "2       13         6.30    6      3500                              83.84   \n",
       "3       16         6.30    4      3500                              83.84   \n",
       "4       19         5.99    4      4000                              77.43   \n",
       "\n",
       "   Weight  Height  Internal Memory  Resolution  Pixel Density     ...       \\\n",
       "0     168   156.2               16           5            271     ...        \n",
       "1     205   156.0               64          12            402     ...        \n",
       "2     169   156.7               64          25            409     ...        \n",
       "3     169   156.7               64          16            409     ...        \n",
       "4     181   158.6               64          20            403     ...        \n",
       "\n",
       "   Num_cores_Dual  Num_cores_Hexa  Num_cores_Octa  Num_cores_Other  \\\n",
       "0               0               0               1                0   \n",
       "1               0               0               1                0   \n",
       "2               0               0               1                0   \n",
       "3               0               0               1                0   \n",
       "4               0               0               1                0   \n",
       "\n",
       "   Num_cores_Quad  Num_cores_Tru-Octa  SIM 2_2G  SIM 2_3G  SIM 2_4G  \\\n",
       "0               0                   0         0         0         1   \n",
       "1               0                   0         0         0         1   \n",
       "2               0                   0         0         0         1   \n",
       "3               0                   0         0         0         1   \n",
       "4               0                   0         0         0         1   \n",
       "\n",
       "   SIM 2_Other  \n",
       "0            0  \n",
       "1            0  \n",
       "2            0  \n",
       "3            0  \n",
       "4            0  \n",
       "\n",
       "[5 rows x 87 columns]"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_new.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Dummy Solution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "# submission = pd.DataFrame({'PhoneId':test_new['PhoneId'], 'Class':[1]*test_new.shape[0]})\n",
    "# submission = submission[['PhoneId', 'Class']]\n",
    "# submission.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "# submission.to_csv(\"submission.csv\", index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PhoneId</th>\n",
       "      <th>Screen Size</th>\n",
       "      <th>RAM</th>\n",
       "      <th>Capacity</th>\n",
       "      <th>Screen to Body Ratio (calculated)</th>\n",
       "      <th>Weight</th>\n",
       "      <th>Height</th>\n",
       "      <th>Internal Memory</th>\n",
       "      <th>Resolution</th>\n",
       "      <th>Pixel Density</th>\n",
       "      <th>...</th>\n",
       "      <th>Num_cores_Hexa</th>\n",
       "      <th>Num_cores_Octa</th>\n",
       "      <th>Num_cores_Other</th>\n",
       "      <th>Num_cores_Quad</th>\n",
       "      <th>Num_cores_Tru-Octa</th>\n",
       "      <th>SIM 2_2G</th>\n",
       "      <th>SIM 2_3G</th>\n",
       "      <th>SIM 2_4G</th>\n",
       "      <th>SIM 2_Other</th>\n",
       "      <th>Rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>6.26</td>\n",
       "      <td>4</td>\n",
       "      <td>4000</td>\n",
       "      <td>80.68</td>\n",
       "      <td>182</td>\n",
       "      <td>157.9</td>\n",
       "      <td>64</td>\n",
       "      <td>20</td>\n",
       "      <td>403</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>6.20</td>\n",
       "      <td>3</td>\n",
       "      <td>4230</td>\n",
       "      <td>80.85</td>\n",
       "      <td>168</td>\n",
       "      <td>156.2</td>\n",
       "      <td>32</td>\n",
       "      <td>8</td>\n",
       "      <td>271</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>6.30</td>\n",
       "      <td>3</td>\n",
       "      <td>3500</td>\n",
       "      <td>83.68</td>\n",
       "      <td>168</td>\n",
       "      <td>157.0</td>\n",
       "      <td>32</td>\n",
       "      <td>25</td>\n",
       "      <td>409</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>6.00</td>\n",
       "      <td>4</td>\n",
       "      <td>3300</td>\n",
       "      <td>74.78</td>\n",
       "      <td>169</td>\n",
       "      <td>159.8</td>\n",
       "      <td>64</td>\n",
       "      <td>24</td>\n",
       "      <td>411</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>6.50</td>\n",
       "      <td>4</td>\n",
       "      <td>3750</td>\n",
       "      <td>84.23</td>\n",
       "      <td>175</td>\n",
       "      <td>160.4</td>\n",
       "      <td>64</td>\n",
       "      <td>16</td>\n",
       "      <td>396</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4.4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 88 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   PhoneId  Screen Size  RAM  Capacity  Screen to Body Ratio (calculated)  \\\n",
       "0        0         6.26    4      4000                              80.68   \n",
       "1        1         6.20    3      4230                              80.85   \n",
       "2        2         6.30    3      3500                              83.68   \n",
       "3        4         6.00    4      3300                              74.78   \n",
       "4        5         6.50    4      3750                              84.23   \n",
       "\n",
       "   Weight  Height  Internal Memory  Resolution  Pixel Density   ...    \\\n",
       "0     182   157.9               64          20            403   ...     \n",
       "1     168   156.2               32           8            271   ...     \n",
       "2     168   157.0               32          25            409   ...     \n",
       "3     169   159.8               64          24            411   ...     \n",
       "4     175   160.4               64          16            396   ...     \n",
       "\n",
       "   Num_cores_Hexa  Num_cores_Octa  Num_cores_Other  Num_cores_Quad  \\\n",
       "0               0               1                0               0   \n",
       "1               0               1                0               0   \n",
       "2               0               1                0               0   \n",
       "3               0               1                0               0   \n",
       "4               0               1                0               0   \n",
       "\n",
       "   Num_cores_Tru-Octa  SIM 2_2G  SIM 2_3G  SIM 2_4G  SIM 2_Other  Rating  \n",
       "0                   0         0         0         1            0     4.5  \n",
       "1                   0         0         0         1            0     4.5  \n",
       "2                   0         0         0         1            0     4.4  \n",
       "3                   0         0         0         1            0     4.3  \n",
       "4                   0         0         0         1            0     4.4  \n",
       "\n",
       "[5 rows x 88 columns]"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_new.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(341, 88) (119, 87)\n"
     ]
    }
   ],
   "source": [
    "# Last column contains the ratings i.e. the label\n",
    "print(train_new.shape, test_new.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "25    4.3\n",
       "26    4.3\n",
       "27    4.6\n",
       "28    4.4\n",
       "29    4.5\n",
       "30    3.9\n",
       "31    4.2\n",
       "32    4.3\n",
       "33    4.2\n",
       "34    4.3\n",
       "35    4.3\n",
       "36    4.2\n",
       "37    4.4\n",
       "38    4.1\n",
       "39    3.8\n",
       "Name: Rating, dtype: float64"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Labels have not been binarized\n",
    "train_new['Rating'][25:40]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Binarize the labels\n",
    "train_new['Rating'] = train_new['Rating'].apply(lambda x: 1 if x>=4 else 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "25    1\n",
       "26    1\n",
       "27    1\n",
       "28    1\n",
       "29    1\n",
       "30    0\n",
       "31    1\n",
       "32    1\n",
       "33    1\n",
       "34    1\n",
       "35    1\n",
       "36    1\n",
       "37    1\n",
       "38    1\n",
       "39    0\n",
       "Name: Rating, dtype: int64"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_new['Rating'][25:40]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Removing extreme values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(341, 88)\n",
      "(333, 88)\n"
     ]
    }
   ],
   "source": [
    "print(train_new.shape)\n",
    "train_new_modi = train_new[train_new.RAM < 16]\n",
    "print(train_new_modi.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Split train_new into X and y."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "y = train_new_modi['Rating']\n",
    "X = train_new_modi.drop('Rating', axis = 1)  # Not inplace, train_new is not affected"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(333, 87) (333,)\n"
     ]
    }
   ],
   "source": [
    "print(X.shape, y.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    235\n",
       "0     98\n",
       "Name: Rating, dtype: int64"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Verifying that y contains the labels. Also data imbalance is observed hence stratified split is necessary in next step\n",
    "y.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(299, 87) (34, 87) (299,) (34,)\n",
      "0.705685618729097 0.7058823529411765\n"
     ]
    }
   ],
   "source": [
    "# Split the training data into train and val set\n",
    "\n",
    "X_train, X_val, y_train, y_val = train_test_split(X, y, random_state = 42, stratify = y, test_size = 0.1)\n",
    "print(X_train.shape, X_val.shape, y_train.shape, y_val.shape)\n",
    "print(y_train.mean(), y_val.mean())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Normalizing and Standardizing the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Normalization/STandardization should not be done for one hot encoded columns\n",
    "not_onehot = list()\n",
    "for i in X_train.columns:\n",
    "    if X_train[i].dtype != 'uint8':\n",
    "        not_onehot.append(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Normalizing\n",
    "# X_train[not_onehot]=(X_train[not_onehot]-X_train[not_onehot].min())/(X_train[not_onehot].max()-X_train[not_onehot].min())\n",
    "# X_val[not_onehot]=(X_val[not_onehot]-X_val[not_onehot].min())/(X_val[not_onehot].max()-X_val[not_onehot].min())\n",
    "# (0.8627450980392157, 0.8, 10000, 0.001) ; LB = 0.77142\n",
    "\n",
    "\n",
    "# Standardizing\n",
    "X_train[not_onehot]=(X_train[not_onehot]-X_train[not_onehot].median())/X_train[not_onehot].std()\n",
    "X_val[not_onehot]=(X_val[not_onehot]-X_val[not_onehot].median())/X_val[not_onehot].std()\n",
    "## 0.869281045751634, 0.7714285714285715, 10000, 0.1 ; LB = 0.8\n",
    "\n",
    "\n",
    "# X_train[not_onehot]=(X_train[not_onehot]-X_train[not_onehot].mean())/X_train[not_onehot].std()\n",
    "# X_val[not_onehot]=(X_val[not_onehot]-X_val[not_onehot].mean())/X_val[not_onehot].std()\n",
    "## (0.869281045751634, 0.7428571428571429, 5000, 0.01)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PhoneId</th>\n",
       "      <th>Screen Size</th>\n",
       "      <th>RAM</th>\n",
       "      <th>Capacity</th>\n",
       "      <th>Screen to Body Ratio (calculated)</th>\n",
       "      <th>Weight</th>\n",
       "      <th>Height</th>\n",
       "      <th>Internal Memory</th>\n",
       "      <th>Resolution</th>\n",
       "      <th>Pixel Density</th>\n",
       "      <th>...</th>\n",
       "      <th>Num_cores_Dual</th>\n",
       "      <th>Num_cores_Hexa</th>\n",
       "      <th>Num_cores_Octa</th>\n",
       "      <th>Num_cores_Other</th>\n",
       "      <th>Num_cores_Quad</th>\n",
       "      <th>Num_cores_Tru-Octa</th>\n",
       "      <th>SIM 2_2G</th>\n",
       "      <th>SIM 2_3G</th>\n",
       "      <th>SIM 2_4G</th>\n",
       "      <th>SIM 2_Other</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>163</th>\n",
       "      <td>-0.088333</td>\n",
       "      <td>-0.080318</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.985792</td>\n",
       "      <td>0.070950</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-0.412410</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-0.508970</td>\n",
       "      <td>-0.374558</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>262</th>\n",
       "      <td>0.964299</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.654948</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-0.147061</td>\n",
       "      <td>-0.377863</td>\n",
       "      <td>0.176747</td>\n",
       "      <td>0.669626</td>\n",
       "      <td>1.357253</td>\n",
       "      <td>-0.712869</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>-1.509017</td>\n",
       "      <td>1.220833</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.985792</td>\n",
       "      <td>1.050067</td>\n",
       "      <td>-0.047233</td>\n",
       "      <td>0.813037</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-0.688704</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>241</th>\n",
       "      <td>0.714023</td>\n",
       "      <td>-0.803180</td>\n",
       "      <td>-0.654948</td>\n",
       "      <td>-0.514326</td>\n",
       "      <td>-0.592114</td>\n",
       "      <td>-1.086357</td>\n",
       "      <td>-1.072267</td>\n",
       "      <td>-0.334813</td>\n",
       "      <td>-0.508970</td>\n",
       "      <td>-0.386641</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>318</th>\n",
       "      <td>1.538461</td>\n",
       "      <td>-1.606360</td>\n",
       "      <td>-1.309896</td>\n",
       "      <td>-1.157234</td>\n",
       "      <td>-1.167458</td>\n",
       "      <td>-1.086357</td>\n",
       "      <td>-2.215232</td>\n",
       "      <td>-0.502220</td>\n",
       "      <td>-0.508970</td>\n",
       "      <td>-1.304913</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>-0.765550</td>\n",
       "      <td>-0.080318</td>\n",
       "      <td>-0.654948</td>\n",
       "      <td>0.985792</td>\n",
       "      <td>0.070950</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-0.412410</td>\n",
       "      <td>-0.334813</td>\n",
       "      <td>-0.508970</td>\n",
       "      <td>-0.374558</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>186</th>\n",
       "      <td>0.132499</td>\n",
       "      <td>-0.803180</td>\n",
       "      <td>-0.654948</td>\n",
       "      <td>-0.064291</td>\n",
       "      <td>-0.844956</td>\n",
       "      <td>-0.236165</td>\n",
       "      <td>-0.742338</td>\n",
       "      <td>-0.334813</td>\n",
       "      <td>0.848283</td>\n",
       "      <td>-0.386641</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>194</th>\n",
       "      <td>0.250276</td>\n",
       "      <td>0.803180</td>\n",
       "      <td>3.274739</td>\n",
       "      <td>0.771489</td>\n",
       "      <td>0.767555</td>\n",
       "      <td>1.133590</td>\n",
       "      <td>0.777688</td>\n",
       "      <td>2.008879</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.918272</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>332</th>\n",
       "      <td>1.656238</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-0.085721</td>\n",
       "      <td>-0.272192</td>\n",
       "      <td>-0.047233</td>\n",
       "      <td>0.329928</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.848283</td>\n",
       "      <td>0.906190</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>-1.295546</td>\n",
       "      <td>1.285088</td>\n",
       "      <td>0.654948</td>\n",
       "      <td>0.450035</td>\n",
       "      <td>1.442229</td>\n",
       "      <td>0.330630</td>\n",
       "      <td>0.648073</td>\n",
       "      <td>0.669626</td>\n",
       "      <td>2.884162</td>\n",
       "      <td>1.002850</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10 rows × 87 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      PhoneId  Screen Size       RAM  Capacity  \\\n",
       "163 -0.088333    -0.080318  0.000000  0.985792   \n",
       "262  0.964299     0.000000  0.654948  0.000000   \n",
       "19  -1.509017     1.220833  0.000000  0.985792   \n",
       "241  0.714023    -0.803180 -0.654948 -0.514326   \n",
       "318  1.538461    -1.606360 -1.309896 -1.157234   \n",
       "97  -0.765550    -0.080318 -0.654948  0.985792   \n",
       "186  0.132499    -0.803180 -0.654948 -0.064291   \n",
       "194  0.250276     0.803180  3.274739  0.771489   \n",
       "332  1.656238     0.000000  0.000000 -0.085721   \n",
       "40  -1.295546     1.285088  0.654948  0.450035   \n",
       "\n",
       "     Screen to Body Ratio (calculated)    Weight    Height  Internal Memory  \\\n",
       "163                           0.070950  0.000000 -0.412410         0.000000   \n",
       "262                          -0.147061 -0.377863  0.176747         0.669626   \n",
       "19                            1.050067 -0.047233  0.813037         0.000000   \n",
       "241                          -0.592114 -1.086357 -1.072267        -0.334813   \n",
       "318                          -1.167458 -1.086357 -2.215232        -0.502220   \n",
       "97                            0.070950  0.000000 -0.412410        -0.334813   \n",
       "186                          -0.844956 -0.236165 -0.742338        -0.334813   \n",
       "194                           0.767555  1.133590  0.777688         2.008879   \n",
       "332                          -0.272192 -0.047233  0.329928         0.000000   \n",
       "40                            1.442229  0.330630  0.648073         0.669626   \n",
       "\n",
       "     Resolution  Pixel Density     ...       Num_cores_Dual  Num_cores_Hexa  \\\n",
       "163   -0.508970      -0.374558     ...                    0               0   \n",
       "262    1.357253      -0.712869     ...                    0               0   \n",
       "19     0.000000      -0.688704     ...                    0               0   \n",
       "241   -0.508970      -0.386641     ...                    0               0   \n",
       "318   -0.508970      -1.304913     ...                    0               0   \n",
       "97    -0.508970      -0.374558     ...                    0               0   \n",
       "186    0.848283      -0.386641     ...                    0               0   \n",
       "194    0.000000       0.918272     ...                    0               0   \n",
       "332    0.848283       0.906190     ...                    0               0   \n",
       "40     2.884162       1.002850     ...                    0               0   \n",
       "\n",
       "     Num_cores_Octa  Num_cores_Other  Num_cores_Quad  Num_cores_Tru-Octa  \\\n",
       "163               0                0               1                   0   \n",
       "262               1                0               0                   0   \n",
       "19                1                0               0                   0   \n",
       "241               0                0               1                   0   \n",
       "318               0                0               1                   0   \n",
       "97                0                0               1                   0   \n",
       "186               0                0               1                   0   \n",
       "194               1                0               0                   0   \n",
       "332               1                0               0                   0   \n",
       "40                1                0               0                   0   \n",
       "\n",
       "     SIM 2_2G  SIM 2_3G  SIM 2_4G  SIM 2_Other  \n",
       "163         0         0         1            0  \n",
       "262         0         0         1            0  \n",
       "19          0         0         1            0  \n",
       "241         0         1         0            0  \n",
       "318         0         0         1            0  \n",
       "97          0         0         1            0  \n",
       "186         0         0         1            0  \n",
       "194         0         0         1            0  \n",
       "332         0         0         1            0  \n",
       "40          0         0         1            0  \n",
       "\n",
       "[10 rows x 87 columns]"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PhoneId</th>\n",
       "      <th>Screen Size</th>\n",
       "      <th>RAM</th>\n",
       "      <th>Capacity</th>\n",
       "      <th>Screen to Body Ratio (calculated)</th>\n",
       "      <th>Weight</th>\n",
       "      <th>Height</th>\n",
       "      <th>Internal Memory</th>\n",
       "      <th>Resolution</th>\n",
       "      <th>Pixel Density</th>\n",
       "      <th>...</th>\n",
       "      <th>Num_cores_Hexa</th>\n",
       "      <th>Num_cores_Octa</th>\n",
       "      <th>Num_cores_Other</th>\n",
       "      <th>Num_cores_Quad</th>\n",
       "      <th>Num_cores_Tru-Octa</th>\n",
       "      <th>SIM 2_2G</th>\n",
       "      <th>SIM 2_3G</th>\n",
       "      <th>SIM 2_4G</th>\n",
       "      <th>SIM 2_Other</th>\n",
       "      <th>Rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>56</td>\n",
       "      <td>5.5</td>\n",
       "      <td>4</td>\n",
       "      <td>4000</td>\n",
       "      <td>70.95</td>\n",
       "      <td>180</td>\n",
       "      <td>154.5</td>\n",
       "      <td>64</td>\n",
       "      <td>13</td>\n",
       "      <td>401</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>58</td>\n",
       "      <td>6.2</td>\n",
       "      <td>6</td>\n",
       "      <td>3500</td>\n",
       "      <td>83.99</td>\n",
       "      <td>189</td>\n",
       "      <td>158.1</td>\n",
       "      <td>64</td>\n",
       "      <td>8</td>\n",
       "      <td>531</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>38</td>\n",
       "      <td>6.3</td>\n",
       "      <td>6</td>\n",
       "      <td>3800</td>\n",
       "      <td>80.86</td>\n",
       "      <td>183</td>\n",
       "      <td>162.5</td>\n",
       "      <td>128</td>\n",
       "      <td>24</td>\n",
       "      <td>392</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>254</th>\n",
       "      <td>351</td>\n",
       "      <td>5.7</td>\n",
       "      <td>3</td>\n",
       "      <td>4000</td>\n",
       "      <td>75.21</td>\n",
       "      <td>175</td>\n",
       "      <td>154.4</td>\n",
       "      <td>32</td>\n",
       "      <td>8</td>\n",
       "      <td>282</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>295</th>\n",
       "      <td>410</td>\n",
       "      <td>5.5</td>\n",
       "      <td>3</td>\n",
       "      <td>3000</td>\n",
       "      <td>69.46</td>\n",
       "      <td>170</td>\n",
       "      <td>152.4</td>\n",
       "      <td>32</td>\n",
       "      <td>5</td>\n",
       "      <td>267</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>117</th>\n",
       "      <td>157</td>\n",
       "      <td>5.5</td>\n",
       "      <td>4</td>\n",
       "      <td>3200</td>\n",
       "      <td>72.17</td>\n",
       "      <td>153</td>\n",
       "      <td>153.3</td>\n",
       "      <td>64</td>\n",
       "      <td>16</td>\n",
       "      <td>401</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>6.2</td>\n",
       "      <td>3</td>\n",
       "      <td>4230</td>\n",
       "      <td>80.85</td>\n",
       "      <td>168</td>\n",
       "      <td>156.2</td>\n",
       "      <td>32</td>\n",
       "      <td>8</td>\n",
       "      <td>271</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>135</th>\n",
       "      <td>184</td>\n",
       "      <td>6.0</td>\n",
       "      <td>6</td>\n",
       "      <td>4000</td>\n",
       "      <td>75.32</td>\n",
       "      <td>188</td>\n",
       "      <td>162.9</td>\n",
       "      <td>64</td>\n",
       "      <td>16</td>\n",
       "      <td>367</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>58</th>\n",
       "      <td>76</td>\n",
       "      <td>6.4</td>\n",
       "      <td>8</td>\n",
       "      <td>3500</td>\n",
       "      <td>85.05</td>\n",
       "      <td>182</td>\n",
       "      <td>157.5</td>\n",
       "      <td>128</td>\n",
       "      <td>25</td>\n",
       "      <td>403</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>122</th>\n",
       "      <td>162</td>\n",
       "      <td>4.7</td>\n",
       "      <td>2</td>\n",
       "      <td>1821</td>\n",
       "      <td>65.23</td>\n",
       "      <td>148</td>\n",
       "      <td>138.4</td>\n",
       "      <td>64</td>\n",
       "      <td>7</td>\n",
       "      <td>326</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10 rows × 88 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     PhoneId  Screen Size  RAM  Capacity  Screen to Body Ratio (calculated)  \\\n",
       "39        56          5.5    4      4000                              70.95   \n",
       "41        58          6.2    6      3500                              83.99   \n",
       "26        38          6.3    6      3800                              80.86   \n",
       "254      351          5.7    3      4000                              75.21   \n",
       "295      410          5.5    3      3000                              69.46   \n",
       "117      157          5.5    4      3200                              72.17   \n",
       "1          1          6.2    3      4230                              80.85   \n",
       "135      184          6.0    6      4000                              75.32   \n",
       "58        76          6.4    8      3500                              85.05   \n",
       "122      162          4.7    2      1821                              65.23   \n",
       "\n",
       "     Weight  Height  Internal Memory  Resolution  Pixel Density   ...    \\\n",
       "39      180   154.5               64          13            401   ...     \n",
       "41      189   158.1               64           8            531   ...     \n",
       "26      183   162.5              128          24            392   ...     \n",
       "254     175   154.4               32           8            282   ...     \n",
       "295     170   152.4               32           5            267   ...     \n",
       "117     153   153.3               64          16            401   ...     \n",
       "1       168   156.2               32           8            271   ...     \n",
       "135     188   162.9               64          16            367   ...     \n",
       "58      182   157.5              128          25            403   ...     \n",
       "122     148   138.4               64           7            326   ...     \n",
       "\n",
       "     Num_cores_Hexa  Num_cores_Octa  Num_cores_Other  Num_cores_Quad  \\\n",
       "39                0               0                0               0   \n",
       "41                0               1                0               0   \n",
       "26                0               1                0               0   \n",
       "254               0               1                0               0   \n",
       "295               0               1                0               0   \n",
       "117               0               1                0               0   \n",
       "1                 0               1                0               0   \n",
       "135               0               1                0               0   \n",
       "58                0               1                0               0   \n",
       "122               1               0                0               0   \n",
       "\n",
       "     Num_cores_Tru-Octa  SIM 2_2G  SIM 2_3G  SIM 2_4G  SIM 2_Other  Rating  \n",
       "39                    0         0         0         1            0       0  \n",
       "41                    0         0         0         1            0       1  \n",
       "26                    0         0         0         1            0       1  \n",
       "254                   0         0         0         1            0       1  \n",
       "295                   0         0         1         0            0       0  \n",
       "117                   0         0         0         1            0       1  \n",
       "1                     0         0         0         1            0       1  \n",
       "135                   0         0         0         1            0       1  \n",
       "58                    0         0         0         1            0       1  \n",
       "122                   0         0         0         0            1       1  \n",
       "\n",
       "[10 rows x 88 columns]"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_new.iloc[[39, 41, 26, 254, 295, 117, 1, 135, 58, 122], :]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(299, 87)"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Remove unneccessary one-hot columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(299, 87) (34, 87)\n",
      "(299, 65) (34, 65)\n"
     ]
    }
   ],
   "source": [
    "percentage = 0.005\n",
    "\n",
    "\n",
    "print(X_train.shape, X_val.shape)\n",
    "# (0.7843137254901961, 0.7428571428571429, 5000, 1) : 5 percent\n",
    "# (0.8529411764705882, 0.7714285714285715, 10000, 0.1) : 1 percent\n",
    "# (0.8758169934640523, 0.8, 10000, 0.01) : 0.5 percent -----> LB score : 0.88571: columns reduced from 87 to 66\n",
    "one_hot_drop = list()\n",
    "for i in X_train.columns:\n",
    "    if X_train[i].dtype == 'uint8':\n",
    "        if X_train[i].shape[0]*percentage > X_train[i].sum(axis=0):\n",
    "            one_hot_drop.append(i)\n",
    "\n",
    "X_train.drop(one_hot_drop, axis = 1, inplace=True)\n",
    "X_val.drop(one_hot_drop, axis = 1, inplace=True)\n",
    "\n",
    "X_train.drop('PhoneId', axis = 1, inplace=True)\n",
    "X_val.drop('PhoneId', axis = 1, inplace=True)\n",
    "\n",
    "test_\n",
    "\n",
    "print(X_train.shape, X_val.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Perceptron Class"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Perceptron:\n",
    "  \n",
    "    def __init__ (self):\n",
    "        self.w = None\n",
    "        self.b = None\n",
    "\n",
    "    def model(self, x):\n",
    "        return 1 if (np.dot(self.w, x) >= self.b) else 0\n",
    "\n",
    "    def predict(self, X):\n",
    "        Y = []\n",
    "        for x in X:\n",
    "            result = self.model(x)\n",
    "            Y.append(result)\n",
    "        return np.array(Y)\n",
    "\n",
    "    def fit(self, X, Y, epochs = 1, lr = 1):\n",
    "\n",
    "        self.b = 0\n",
    "        self.w = np.ones(X.shape[1])\n",
    "        accuracy = {}\n",
    "        max_accuracy = 0\n",
    "\n",
    "#         wt_matrix = []\n",
    "\n",
    "        for i in range(epochs):\n",
    "            for x, y in zip(X, Y):\n",
    "                y_pred = self.model(x)\n",
    "                if y == 1 and y_pred == 0:\n",
    "                    self.w = self.w + lr * x\n",
    "                    self.b = self.b - lr * 1\n",
    "                elif y == 0 and y_pred == 1:\n",
    "                    self.w = self.w - lr * x\n",
    "                    self.b = self.b + lr * 1\n",
    "\n",
    "#             wt_matrix.append(self.w)    \n",
    "\n",
    "            accuracy[i] = accuracy_score(self.predict(X), Y)\n",
    "            if (accuracy[i] > max_accuracy):\n",
    "                max_accuracy = accuracy[i]\n",
    "                chkptw = self.w\n",
    "                chkptb = self.b\n",
    "\n",
    "        self.w = chkptw\n",
    "        self.b = chkptb\n",
    "\n",
    "        print('Max training accuracy:',max_accuracy)\n",
    "\n",
    "#         plt.plot(accuracy.values())\n",
    "#         plt.ylim([0, 1])\n",
    "#         plt.show()\n",
    "\n",
    "        return max_accuracy, (chkptw, chkptb)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## LR and Epoch grid search"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "epochs: 5000  ,LR: 0.005\n",
      "Max training accuracy: 0.8662207357859532\n",
      "Max Validation accuracy: 0.8529411764705882\n",
      "--------------------------------------------------\n",
      "epochs: 5000  ,LR: 0.010000000000000002\n",
      "Max training accuracy: 0.862876254180602\n",
      "Max Validation accuracy: 0.8529411764705882\n",
      "--------------------------------------------------\n",
      "epochs: 5000  ,LR: 0.015000000000000003\n",
      "Max training accuracy: 0.8595317725752508\n",
      "Max Validation accuracy: 0.8235294117647058\n",
      "--------------------------------------------------\n",
      "epochs: 5000  ,LR: 0.020000000000000004\n",
      "Max training accuracy: 0.8662207357859532\n",
      "Max Validation accuracy: 0.8235294117647058\n",
      "--------------------------------------------------\n",
      "epochs: 5000  ,LR: 0.025000000000000005\n",
      "Max training accuracy: 0.8662207357859532\n",
      "Max Validation accuracy: 0.8235294117647058\n",
      "--------------------------------------------------\n",
      "epochs: 5000  ,LR: 0.030000000000000006\n",
      "Max training accuracy: 0.8662207357859532\n",
      "Max Validation accuracy: 0.8235294117647058\n",
      "--------------------------------------------------\n",
      "epochs: 5000  ,LR: 0.035\n",
      "Max training accuracy: 0.8695652173913043\n",
      "Max Validation accuracy: 0.8235294117647058\n",
      "--------------------------------------------------\n",
      "epochs: 5000  ,LR: 0.04\n",
      "Max training accuracy: 0.8662207357859532\n",
      "Max Validation accuracy: 0.7941176470588235\n",
      "--------------------------------------------------\n",
      "epochs: 5000  ,LR: 0.045000000000000005\n",
      "Max training accuracy: 0.8662207357859532\n",
      "Max Validation accuracy: 0.7941176470588235\n",
      "--------------------------------------------------\n",
      "epochs: 5000  ,LR: 0.05\n",
      "Max training accuracy: 0.8662207357859532\n",
      "Max Validation accuracy: 0.7647058823529411\n",
      "--------------------------------------------------\n",
      "epochs: 10000  ,LR: 0.005\n",
      "Max training accuracy: 0.8662207357859532\n",
      "Max Validation accuracy: 0.8529411764705882\n",
      "--------------------------------------------------\n",
      "epochs: 10000  ,LR: 0.010000000000000002\n",
      "Max training accuracy: 0.8662207357859532\n",
      "Max Validation accuracy: 0.8235294117647058\n",
      "--------------------------------------------------\n",
      "epochs: 10000  ,LR: 0.015000000000000003\n",
      "Max training accuracy: 0.8662207357859532\n",
      "Max Validation accuracy: 0.8235294117647058\n",
      "--------------------------------------------------\n",
      "epochs: 10000  ,LR: 0.020000000000000004\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-72-9e0fe2625a86>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m     15\u001b[0m     \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'epochs:'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mi\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m' ,LR:'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mj\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     16\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 17\u001b[1;33m     \u001b[0mtrain_score\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mwt_matrix\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mperceptron\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mi\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mj\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     18\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     19\u001b[0m     \u001b[0mY_pred_test\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mperceptron\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX_val\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m<ipython-input-71-073fc7e89389>\u001b[0m in \u001b[0;36mfit\u001b[1;34m(self, X, Y, epochs, lr)\u001b[0m\n\u001b[0;32m     36\u001b[0m \u001b[1;31m#             wt_matrix.append(self.w)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     37\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 38\u001b[1;33m             \u001b[0maccuracy\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mi\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0maccuracy_score\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mY\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     39\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0maccuracy\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mi\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m>\u001b[0m \u001b[0mmax_accuracy\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     40\u001b[0m                 \u001b[0mmax_accuracy\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0maccuracy\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mi\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m<ipython-input-71-073fc7e89389>\u001b[0m in \u001b[0;36mpredict\u001b[1;34m(self, X)\u001b[0m\n\u001b[0;32m     11\u001b[0m         \u001b[0mY\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m[\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     12\u001b[0m         \u001b[1;32mfor\u001b[0m \u001b[0mx\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mX\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 13\u001b[1;33m             \u001b[0mresult\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmodel\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mx\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     14\u001b[0m             \u001b[0mY\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     15\u001b[0m         \u001b[1;32mreturn\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0marray\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mY\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m<ipython-input-71-073fc7e89389>\u001b[0m in \u001b[0;36mmodel\u001b[1;34m(self, x)\u001b[0m\n\u001b[0;32m      6\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      7\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mmodel\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mx\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 8\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[1;36m1\u001b[0m \u001b[1;32mif\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdot\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mw\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mx\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m>=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mb\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;32melse\u001b[0m \u001b[1;36m0\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      9\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     10\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mpredict\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mX\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "val_accs = list()\n",
    "# epochs = np.linspace(7500, 15000, num = 5, dtype = int)\n",
    "# LR = np.linspace(0.001, 0.1, num = 10)\n",
    "# (0.8725490196078431, 0.8285714285714286, 7500, 0.067) : LB- 0.85714\n",
    "\n",
    "# epochs = np.linspace(5000, 10000, num = 5, dtype = int)\n",
    "# LR = [0.001, 0.01, 0.05, 0.067, 0.1]\n",
    "\n",
    "epochs = np.linspace(5000, 10000, num = 2, dtype = int)\n",
    "LR = np.linspace(0.005, 0.05, num = 10)\n",
    "\n",
    "\n",
    "for i, j in list(itertools.product(epochs, LR)):\n",
    "    perceptron = Perceptron()\n",
    "    print('epochs:', i, ' ,LR:', j)\n",
    "    \n",
    "    train_score, wt_matrix = perceptron.fit(X_train.values, y_train.values, i, j)\n",
    "    \n",
    "    Y_pred_test = perceptron.predict(X_val.values)\n",
    "    \n",
    "    val_score = accuracy_score(Y_pred_test, y_val.values)\n",
    "    print('Max Validation accuracy:', val_score)\n",
    "    print('-'*50)\n",
    "    val_accs.append((train_score, val_score, i, j, wt_matrix))\n",
    "\n",
    "    \n",
    "max_val = 0\n",
    "Final_config = None\n",
    "for i in val_accs:\n",
    "    if i[1]>max_val:\n",
    "        Final_config = i\n",
    "        max_val = i[1]\n",
    "\n",
    "print(Final_config[:-1])\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## LR uniformly decrease"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# val_accs = list()\n",
    "# epochs = [7500]\n",
    "# LR = np.linspace(0.001, 0.1, num = 10)[::-1]\n",
    "\n",
    "# perceptron = Perceptron()\n",
    "# for i, j in list(itertools.product(epochs, LR)):\n",
    "    \n",
    "#     print('epochs:', i, ' ,LR:', j)\n",
    "    \n",
    "#     train_score, wt_matrix = perceptron.fit(X_train.values, y_train.values, i, j)\n",
    "    \n",
    "#     Y_pred_test = perceptron.predict(X_val.values)\n",
    "    \n",
    "#     val_score = accuracy_score(Y_pred_test, y_val.values)\n",
    "#     print('Max Validation accuracy:', val_score)\n",
    "#     print('-'*50)\n",
    "#     val_accs.append((train_score, val_score, i, j, wt_matrix))\n",
    "\n",
    "    \n",
    "# max_val = 0\n",
    "# Final_config = None\n",
    "# for i in val_accs:\n",
    "#     if i[1]>max_val:\n",
    "#         Final_config = i\n",
    "#         max_val = i[1]\n",
    "\n",
    "# print(Final_config[:-1])\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Final model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Max training accuracy: 0.862876254180602\n",
      "Max Validation accuracy: 0.8529411764705882\n"
     ]
    }
   ],
   "source": [
    "perceptron = Perceptron()\n",
    "train_score, wt_matrix = perceptron.fit(X_train.values, y_train.values, 5000, 0.01)\n",
    "Y_pred_test = perceptron.predict(X_val.values) \n",
    "val_score = accuracy_score(Y_pred_test, y_val.values)\n",
    "print('Max Validation accuracy:', val_score)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 5.04807770e-02  4.47940737e-03  5.78079079e-02 -5.77166479e-02\n",
      " -7.83272683e-02  5.40174555e-02 -3.79207555e-02 -9.73909458e-04\n",
      "  2.46615002e-03  3.69227278e-02  8.20000000e-01  2.50000000e-01\n",
      "  3.00000000e-01 -2.10000000e-01  1.05000000e+00 -2.00000000e-02\n",
      " -8.00000000e-02 -8.00000000e-02  1.00000000e-01  1.00000000e+00\n",
      " -1.10000000e-01  5.00000000e-02  1.04000000e+00 -1.10000000e-01\n",
      " -7.00000000e-02 -2.10000000e-01  1.60000000e-01 -1.70000000e-01\n",
      " -4.00000000e-02  5.00000000e-02  1.00000000e-02  1.04000000e+00\n",
      " -6.00000000e-02 -2.00000000e-02  3.00000000e-02 -1.00000000e-02\n",
      "  1.15000000e+00  1.12000000e+00  6.00000000e-02  3.00000000e-02\n",
      "  1.03000000e+00  1.90000000e-01  8.00000000e-02  1.40000000e-01\n",
      "  1.90000000e-01  7.00000000e-02  1.00000000e+00 -1.00000000e-01\n",
      "  2.00000000e-02  8.00000000e-02  3.50000000e-01  4.10000000e-01\n",
      "  9.00000000e-02 -4.90000000e-01  1.05000000e+00 -1.60000000e-01\n",
      "  5.70000000e-01  3.80000000e-01  1.60000000e-01  8.20000000e-01\n",
      "  1.90000000e-01  7.00000000e-01  5.90000000e-01  7.30000000e-01\n",
      "  3.50000000e-01]\n",
      "1.630000000000001\n"
     ]
    }
   ],
   "source": [
    "print(wt_matrix[0])\n",
    "print(wt_matrix[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [],
   "source": [
    "# for i, j in enumerate(list(pd.Series(list([wt_matrix[0]])).apply(pd.cut, bins=2, labels=[0, 1]))):\n",
    "#     print(i, j)\n",
    "weights = [i for i in wt_matrix[0] if np.median(wt_matrix[0])>i]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.0504807770043153,\n",
       " 0.00447940737066701,\n",
       " 0.057807907904967454,\n",
       " -0.05771664794201934,\n",
       " -0.07832726833069086,\n",
       " 0.05401745550334895,\n",
       " -0.037920755522414265,\n",
       " -0.0009739094576849926,\n",
       " 0.0024661500200245986,\n",
       " 0.03692272779008292,\n",
       " -0.2100000000000008,\n",
       " -0.020000000000000753,\n",
       " -0.08000000000000075,\n",
       " -0.08000000000000075,\n",
       " -0.11000000000000074,\n",
       " 0.04999999999999925,\n",
       " -0.11000000000000074,\n",
       " -0.07000000000000076,\n",
       " -0.2100000000000008,\n",
       " -0.17000000000000076,\n",
       " -0.04000000000000075,\n",
       " 0.04999999999999925,\n",
       " 0.009999999999999247,\n",
       " -0.060000000000000754,\n",
       " -0.020000000000000753,\n",
       " 0.02999999999999925,\n",
       " -0.010000000000000753,\n",
       " 0.02999999999999925,\n",
       " -0.10000000000000074,\n",
       " 0.019999999999999248,\n",
       " -0.49000000000000105,\n",
       " -0.16000000000000075]"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "weights"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Submission"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_new.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Submission_median.csv     --> LB 0.80\n",
    "# temp = test_new['PhoneId']\n",
    "# test_new[not_onehot]=(test_new[not_onehot]-test_new[not_onehot].median())/test_new[not_onehot].std()\n",
    "# test_new.drop(one_hot_drop, axis = 1, inplace=True)\n",
    "# test_new.drop('PhoneId', axis = 1, inplace=True)\n",
    "# ------------------------------------------------------------\n",
    "\n",
    "# Submission_min_max.csv      -->  LB 0.77142\n",
    "# temp = test_new['PhoneId']\n",
    "# test_new[not_onehot]=(test_new[not_onehot]-test_new[not_onehot].min())/(test_new[not_onehot].max()-test_new[not_onehot].min())\n",
    "# test_new.drop(one_hot_drop, axis = 1, inplace=True)\n",
    "# test_new.drop('PhoneId', axis = 1, inplace=True)\n",
    "\n",
    "## Submission_dropcol0.005_median    --> LB 0.88571\n",
    "## drop columns percentage = 0.005, dropped phoneid, epochs = 10K , LR = 0.01, median normalization\n",
    "temp = test_new['PhoneId']\n",
    "test_new[not_onehot]=(test_new[not_onehot]-test_new[not_onehot].median())/test_new[not_onehot].std()\n",
    "test_new.drop(one_hot_drop, axis = 1, inplace=True)\n",
    "test_new.drop('PhoneId', axis = 1, inplace=True)\n",
    "\n",
    "# Submission_dropcol0.005_median_grid    -->   LB 0.85714\n",
    "# temp = test_new['PhoneId']\n",
    "# test_new[not_onehot]=(test_new[not_onehot]-test_new[not_onehot].median())/test_new[not_onehot].std()\n",
    "# test_new.drop(one_hot_drop, axis = 1, inplace=True)\n",
    "# test_new.drop('PhoneId', axis = 1, inplace=True)\n",
    "\n",
    "# Submission_dropcol0.005_median_RAM   -->  LB 0.85714\n",
    "# (0.862876254180602, 0.8529411764705882, 5000, 0.01)\n",
    "# temp = test_new['PhoneId']\n",
    "\n",
    "# test_new[not_onehot]=(test_new[not_onehot]-test_new[not_onehot].median())/test_new[not_onehot].std()\n",
    "# test_new.drop(one_hot_drop, axis = 1, inplace=True)\n",
    "# test_new.drop('PhoneId', axis = 1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# # Predict using model\n",
    "test_new_preds = perceptron.predict(test_new.values)\n",
    "\n",
    "# Create dataframe\n",
    "submission = pd.DataFrame({'PhoneId':temp, 'Class':test_new_preds})\n",
    "submission = submission[['PhoneId', 'Class']]\n",
    "submission.head()\n",
    "\n",
    "# Write to csv file\n",
    "submission.to_csv(\"submission_dropcol0.005_median_RAM.csv\", index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Compare how different predictions too existing ones"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# a = pd.read_csv('ensemble_dropcols.csv')\n",
    "b = pd.read_csv('ensemble_0.88dropcols_RAM.csv')\n",
    "# b = pd.read_csv('ensemble_0.88_0.85_0.85.csv')\n",
    "# b = pd.read_csv('submission_dropcol0.005_median_grid.csv')\n",
    "count = 0\n",
    "for i, j in zip(a.Class.values,b.Class.values):\n",
    "    if i!= j:\n",
    "        count += 1\n",
    "print('Differ by:', count)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Ensemble"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# import math\n",
    "\n",
    "# count = 0\n",
    "# # for i in os.listdir():\n",
    "#     # if 'submission_dro' in i:\n",
    "# for i in ['submission_dropcol0.005_median_RAM.csv', 'submission_dropcol0.005_median.csv', 'submission_dropcol0.005_median_grid.csv']:\n",
    "#     if count == 0:\n",
    "#         tot = pd.read_csv(i)\n",
    "#         count+=1\n",
    "#     else: \n",
    "#         tot += pd.read_csv(i)\n",
    "#         count += 1\n",
    "\n",
    "# tot = tot.applymap(lambda x: math.ceil(x/2))\n",
    "# # tot = tot.applymap(lambda x: round(x/3))\n",
    "# tot.to_csv(\"EofE_dropcols_dropcolsRAM_0.88_088.csv\", index=False)\n",
    "# tot.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# train_new.groupby('Rating')['RAM'].describe()\n",
    "\n",
    "# train_new.RAM.unique()\n",
    "\n",
    "# train_new.RAM.value_counts()\n",
    "\n",
    "# print(test_new.shape)\n",
    "# test_new = test_new[test_new.RAM < 16]\n",
    "# print(test_new.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_new.groupby('Rating')['Internal Memory'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "analysis = train_new_modi.groupby('Rating').mean()\n",
    "analysis.to_csv(\"groupby_ratings_mean.csv\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
